import { IS3Operations } from "../../../framework/service/s3Bucket";
import { Next } from "../../../framework/types/serverPackageType";
import { IuserRepository } from "../../interface/repositoryInterface/userRepository";
export declare const getUserDetails: (userId: string, s3: IS3Operations, userRepository: IuserRepository, next: Next) => Promise<void | {
    profileImageUrl: any;
    id?: string;
    role?: string;
    name: string;
    email: string;
    password: string;
    blocked?: boolean;
    approve?: boolean;
    phoneNumber?: string;
    profileImage?: string;
    imageKey?: string;
    status?: boolean;
    coverImageKey?: string;
    picture?: string | undefined;
    showNotification?: boolean;
    followers?: import("mongoose").Types.ObjectId[] | import("../../../commonEntities/entities/user").Iuser[];
    following?: import("mongoose").Types.ObjectId[] | import("../../../commonEntities/entities/user").Iuser[];
    followerCount?: number;
    followingCount?: number;
    created_at?: Date;
    updated_at?: Date;
    bio?: string;
    city?: string;
    country?: string;
    states?: string;
    skill?: string;
    profile?: boolean;
    coverImage?: String;
    googleId?: string;
    googleAvatar?: string;
    resetPasswordToken?: string;
    passwordLastChanged?: Date;
    accountPrivacy?: boolean;
    _id: string;
    isProfessional?: boolean;
    experienceYears?: number;
    professionalBadge?: boolean;
    verificationBadge?: boolean;
    website?: string;
    isRequested?: boolean;
    verificationStatus?: "Pending" | "Approved" | "Rejected";
    proofLink?: string;
    groups?: import("mongoose").Types.ObjectId[];
}>;
